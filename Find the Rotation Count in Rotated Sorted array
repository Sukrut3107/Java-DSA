public class CountOfRotatedArray {
    public static void main(String[] args) {
        int [] arr = {1,2,3,4,5,6};
        System.out.println(countRotations(arr));
    }

     static int countRotations(int[] arr) {
        int pivot = findPivot(arr);
         //int pivot = findPivotDuplicates(arr);
            return pivot+1;
    }
    //use this for non duplicates
    static int findPivot(int [] arr){
        int start=0;
        int end = arr.length-1;
        while (start<=end){
            int mid = start+(end-start)/2;
            // 4 cases over here
            //case1
            if(mid<end && arr[mid]>arr[mid+1]){
                return mid;
            }
            //case2
            if(mid>start && arr[mid]<arr[mid-1]){
                return mid-1;
            }
            //case3
            if(arr[mid]<=arr[start]){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }
        return -1;
    }
    static int findPivotDuplicates(int [] arr){
        int start=0;
        int end = arr.length-1;
        while (start<=end){
            int mid = start+(end-start)/2;
            // 4 cases over here
            //case1
            if(mid<end && arr[mid]>arr[mid+1]){
                return mid;
            }
            //case2
            if(mid>start && arr[mid]<arr[mid-1]){
                return mid-1;
            }
            //if elements at middle, start and end are equal then just skip the duplicates
            if(arr[mid]==arr[start]&&arr[mid]==arr[end]){
                //skipping the duplicates;
                //note what if these elements at start and end were pivots?
                //check if start is pivot
                if(arr[start]>arr[start+1]){
                    return start;
                }
                start++;

                //check whether end is pivot or not
                if(arr[end]<arr[end-1]){
                    return end-1;
                }
                end--;
            }
            //left side is sorted so pivot should be at rght side
            else if(arr[start]<arr[mid]||(arr[start]==arr[mid] && arr[mid]>arr[end])){
                start = mid +1;
            }
            else {
                end = mid - 1;
            }
        }
        return -1;
    }
}
